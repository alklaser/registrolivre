buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("org.flywaydb:flyway-gradle-plugin:3.2.1")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'jacoco'

mainClassName = "br.com.registrolivre.Application"

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("build/reports/jacoco")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "build/reports/jacoco/test/html"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.flywaydb:flyway-core:3.2.1")
    compile("org.hibernate:hibernate-core:4.3.10.Final")
    compile("org.projectlombok:lombok:1.16.4")
    compile("org.postgresql:postgresql:9.4-1201-jdbc41")
    compile("org.apache.commons:commons-dbcp2:2.1")
    compile("com.amazonaws:aws-java-sdk:1.10.10")
    compile("com.google.guava:guava:18.0")

    testCompile("junit:junit:4.12")
    testCompile("org.mockito:mockito-all:1.9.5")
}

task npmInstall(type: Exec) {
    commandLine "npm", "install"
}

task deleteNodeFolder(type: Delete) {
    delete "node_modules"
}

task npmTest(type: Exec) {
    commandLine "npm", "test"
}

task jsTest(dependsOn: ['deleteNodeFolder','npmInstall', 'npmTest'])

task jasmineTest(dependsOn: ['npmTest'])

task deleteVendor(type: Delete) {
    delete 'src/main/resources/static/vendor'
}

task copyBootstrap {
    doLast {
        mkdir('src/main/resources/static/vendor/bootstrap')
        mkdir('src/main/resources/static/vendor/bootstrap/css')
        mkdir('src/main/resources/static/vendor/bootstrap/fonts')
        mkdir('src/main/resources/static/vendor/bootstrap/js')

        copy { from 'node_modules/bootstrap/dist/css/bootstrap.min.css' into 'src/main/resources/static/vendor/bootstrap/css/' }
        copy { from 'node_modules/bootstrap/dist/fonts' into 'src/main/resources/static/vendor/bootstrap/fonts/' }
        copy { from 'node_modules/bootstrap/dist/js/bootstrap.min.js' into 'src/main/resources/static/vendor/bootstrap/js/' }
    }
}

task copyAngular {
    doLast {
        mkdir('src/main/resources/static/vendor/angular')

        copy { from 'node_modules/angular/angular.min.js' into 'src/main/resources/static/vendor/angular/'}
        copy { from 'node_modules/angular-route/angular-route.min.js' into 'src/main/resources/static/vendor/angular/'}
    }
}

task copyLodash {
    doLast {
        mkdir('src/main/resources/static/vendor/lodash')

        copy { from 'node_modules/lodash/index.js' into 'src/main/resources/static/vendor/lodash/'}
    }
}

task copyVendorFiles(dependsOn: ['deleteVendor', 'copyLodash', 'copyBootstrap', 'copyAngular'])

task assembleJar(dependsOn: assemble)

task registroLivreJar(type: Copy, dependsOn: ['clean', 'copyVendorFiles', 'assembleJar']) {
    from jar.archivePath
    into project.rootDir
    rename {
        'registrolivre.jar'
    }
}

registroLivreJar.mustRunAfter(clean)
registroLivreJar.mustRunAfter(clean)
copyAngular.mustRunAfter(deleteVendor)
copyLodash.mustRunAfter(deleteVendor)
copyBootstrap.mustRunAfter(deleteVendor)
copyAngular.mustRunAfter(copyLodash)
assembleJar.mustRunAfter(copyVendorFiles)

clean << {
    project.file('registrolivre.jar').delete()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task checkTestCoverage << {
    def coverageReportPath = "build/reports/jacoco/test/html/index.html"
    def coverageFile = new File(coverageReportPath)
    def matcher = ( coverageFile.text =~ /<tfoot>(.*)<\/tfoot>/ )
    def coverageString = new XmlParser().parseText(matcher[0][0])

    def lineCoverageString = coverageString.tr.td[2].text()
    def branchCoverageString = coverageString.tr.td[4].text()
}

checkTestCoverage.dependsOn jacocoTestReport

test {

    clean.execute()
    testLogging.showStandardStreams = true

    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        events "passed", "skipped", "failed"
    }

    jacoco {
        append = false
        destinationFile = file("build/reports/jacoco/jacocoTest.exec")
        classDumpFile = file("build/reports/jacoco/classpathdumps")
    }
}

test.finalizedBy checkTestCoverage
